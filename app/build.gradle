apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

apply from: "../base.gradle"
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

android {
    defaultConfig {
        applicationId project.applicationId
        multiDexEnabled true
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$rootDir/modules/services/model/schemas".toString())
    }

    buildFeatures {
        viewBinding true
        dataBinding = true
        compose true
    }

    lintOptions {
        abortOnError false
    }

    if (canSignRelease) {
        signingConfigs {
            release {
                storeFile = file(pocketcastsKeyStoreFile)
                storePassword = pocketcastsKeyStorePassword
                keyAlias = pocketcastsKeyStoreAlias
                keyPassword = pocketcastsKeyStoreAliasPassword
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'

            def gitLongVersion = "git -C ${rootDir} describe --tags --long --dirty".execute().text.trim()
            def (gitTag, versionBuild, gitHash, gitDirty) = gitLongVersion.tokenize('-')

            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_radioactive",
                    gitHash: gitHash + (gitDirty ? ("-" + gitDirty) : ""),
                    sentryDsn: ""
            ]
        }

        debugProd {
            initWith debug
        }

        release {
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    gitHash: "",
                    sentryDsn: project.properties['pocketcastsSentryDsn'] ?: ""
            ]

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (canSignRelease) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    implementation project(':modules:services:localization')
    implementation project(':modules:services:preferences')
    implementation project(':modules:services:utils')
    implementation project(':modules:services:ui')
    implementation project(':modules:services:compose')
    implementation project(':modules:services:views')
    implementation project(':modules:services:model')
    implementation project(':modules:services:repositories')
    implementation project(':modules:services:servers')
    implementation project(':modules:services:analytics')
    implementation project(':modules:features:discover')
    implementation project(':modules:features:profile')
    implementation project(':modules:features:settings')
    implementation project(':modules:features:podcasts')
    implementation project(':modules:features:player')
    implementation project(':modules:features:search')
    implementation project(':modules:features:filters')
    implementation project(':modules:features:navigation')
    implementation project(':modules:features:account')
}

task appStart(type: Exec, dependsOn: 'installDebug') {
    commandLine 'adb', 'shell', 'am', 'start', '-n', 'au.com.shiftyjelly.pocketcasts.debug/au.com.shiftyjelly.pocketcasts.ui.MainActivity'
}

task useGoogleServicesDebugFile {
    description 'Copies the debug google-services.json file if file is missing.'
    doLast {
        def googleServicesFile = "google-services.json"
        if (!file("${project.projectDir}/$googleServicesFile").exists()) {
            def debugOnlyFile = "google-services.json_debug-only"
            println "$googleServicesFile file is missing. Copying $debugOnlyFile"
            copy {
                from "${project.projectDir}/$debugOnlyFile"
                into project.projectDir
                rename { googleServicesFile }
            }
        }
    }
}
preBuild.dependsOn(useGoogleServicesDebugFile)
